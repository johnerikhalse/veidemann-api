syntax = "proto3";

package veidemann.api.eventhandler.v1;

import "eventhandler/v1/resources.proto";
import "commons/v1/resources.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option go_package = "github.com/nlnwa/veidemann-api-go/eventhandler/v1;eventhandler";
option java_multiple_files = true;
option java_package = "no.nb.nna.veidemann.api.eventhandler.v1";
option java_outer_classname = "EventHandlerService";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Veidemann Event Handler API"
    version: "1.0.0"
    contact: {
      name: "Veidemann"
      url: "https://github.com/nlnwa/veidemann-api"
    }
  }
  schemes: [
    HTTP, HTTPS, WS, WSS
  ];
};

// Service for working with events.

service EventHandler {
    // Get an event object by ID
    rpc GetEventObject (veidemann.api.eventhandler.v1.EventRef) returns (veidemann.api.eventhandler.v1.EventObject) {
        option (google.api.http) = {
            get: "/api/event/{id}"
        };
    }
    // List a set of event objects
    rpc ListEventObjects (veidemann.api.eventhandler.v1.ListRequest) returns (stream veidemann.api.eventhandler.v1.EventObject) {
        option (google.api.http) = {
            get: "/api/event/"
            body: "*"
        };
    }
    // Count event objects
    rpc CountEventObjects (veidemann.api.eventhandler.v1.ListRequest) returns (veidemann.api.eventhandler.v1.ListCountResponse) {
        option (google.api.http) = {
            get: "/api/event/count"
            body: "*"
        };
    }
    // Save an event object
    rpc SaveEventObject (veidemann.api.eventhandler.v1.SaveRequest) returns (veidemann.api.eventhandler.v1.EventObject) {
        option (google.api.http) = {
            get: "/api/event/{id}"
            body: "*"
        };
    }
    // Update event objects
    rpc UpdateEventObjects (veidemann.api.eventhandler.v1.UpdateRequest) returns (veidemann.api.eventhandler.v1.UpdateResponse) {
        option (google.api.http) = {
            patch: "/api/event/"
            body: "*"
        };
    }
    // Delete an event object
    rpc DeleteEventObject (veidemann.api.eventhandler.v1.EventObject) returns (veidemann.api.eventhandler.v1.DeleteResponse) {
        option (google.api.http) = {
            delete: "/api/event/{id}"
        };
    }

    rpc ListLabels (ListLabelRequest) returns (ListLabelResponse);
}

message ListRequest {
    // Select objects by one or more id's
    repeated string id = 1;
    veidemann.api.eventhandler.v1.EventObject query_template = 2;
    veidemann.api.commons.v1.FieldMask query_mask = 3;
    veidemann.api.commons.v1.FieldMask returned_field_mask = 4;
    string order_by_path = 5;
    bool order_descending = 6;
    int32 page_size = 7;
    int32 offset = 8;
}

message UpdateRequest {
    ListRequest list_request = 1;
    veidemann.api.commons.v1.FieldMask update_mask = 3;
    veidemann.api.eventhandler.v1.EventObject update_template = 4;
    string comment = 5;
}

message SaveRequest {
    veidemann.api.eventhandler.v1.EventObject object = 1;
    string comment = 2;
}

message UpdateResponse {
    int64 updated = 1;
}

message ListCountResponse {
    int64 count = 1;
    bool approximate = 2;
}

message DeleteResponse {
    bool deleted = 1;
}

message ListLabelRequest {
    string text = 1;
}

message ListLabelResponse {
    repeated string label = 1;
}