// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package urlcanonicalizer

import (
	context "context"
	v1 "github.com/nlnwa/veidemann-api/go/frontier/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UrlCanonicalizerServiceClient is the client API for UrlCanonicalizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlCanonicalizerServiceClient interface {
	// Canonicalize URL for crawling.
	// Examples of canonicalization could be:
	// * Remove port numbers for well known schemes (i.e. http://example.com:80 => http://example.com)
	// * Normalize slash for empty path (i.e. http://example.com => http://example.com/)
	// * Normalize double slashes in path (i.e. http://example.com/a//b => http://example.com/a/b)
	CanonicalizeCrawlUrl(ctx context.Context, in *v1.QueuedUri, opts ...grpc.CallOption) (*v1.QueuedUri, error)
	// Canonicalize URL for checking against already crawled queue.
	// Examples of canonicalization could be:
	// * Removing well known session id's (e.g. jsessionid) from query parameters.
	// * Canonicalize according to the rules described for Google Safe Browsing (https://developers.google.com/safe-browsing/v4/urls-hashing)
	CanonicalizeAlreadyIncludedUrl(ctx context.Context, in *v1.QueuedUri, opts ...grpc.CallOption) (*v1.QueuedUri, error)
}

type urlCanonicalizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlCanonicalizerServiceClient(cc grpc.ClientConnInterface) UrlCanonicalizerServiceClient {
	return &urlCanonicalizerServiceClient{cc}
}

func (c *urlCanonicalizerServiceClient) CanonicalizeCrawlUrl(ctx context.Context, in *v1.QueuedUri, opts ...grpc.CallOption) (*v1.QueuedUri, error) {
	out := new(v1.QueuedUri)
	err := c.cc.Invoke(ctx, "/veidemann.api.urlcanonicalizer.v1.UrlCanonicalizerService/CanonicalizeCrawlUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlCanonicalizerServiceClient) CanonicalizeAlreadyIncludedUrl(ctx context.Context, in *v1.QueuedUri, opts ...grpc.CallOption) (*v1.QueuedUri, error) {
	out := new(v1.QueuedUri)
	err := c.cc.Invoke(ctx, "/veidemann.api.urlcanonicalizer.v1.UrlCanonicalizerService/CanonicalizeAlreadyIncludedUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlCanonicalizerServiceServer is the server API for UrlCanonicalizerService service.
// All implementations must embed UnimplementedUrlCanonicalizerServiceServer
// for forward compatibility
type UrlCanonicalizerServiceServer interface {
	// Canonicalize URL for crawling.
	// Examples of canonicalization could be:
	// * Remove port numbers for well known schemes (i.e. http://example.com:80 => http://example.com)
	// * Normalize slash for empty path (i.e. http://example.com => http://example.com/)
	// * Normalize double slashes in path (i.e. http://example.com/a//b => http://example.com/a/b)
	CanonicalizeCrawlUrl(context.Context, *v1.QueuedUri) (*v1.QueuedUri, error)
	// Canonicalize URL for checking against already crawled queue.
	// Examples of canonicalization could be:
	// * Removing well known session id's (e.g. jsessionid) from query parameters.
	// * Canonicalize according to the rules described for Google Safe Browsing (https://developers.google.com/safe-browsing/v4/urls-hashing)
	CanonicalizeAlreadyIncludedUrl(context.Context, *v1.QueuedUri) (*v1.QueuedUri, error)
	mustEmbedUnimplementedUrlCanonicalizerServiceServer()
}

// UnimplementedUrlCanonicalizerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUrlCanonicalizerServiceServer struct {
}

func (UnimplementedUrlCanonicalizerServiceServer) CanonicalizeCrawlUrl(context.Context, *v1.QueuedUri) (*v1.QueuedUri, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanonicalizeCrawlUrl not implemented")
}
func (UnimplementedUrlCanonicalizerServiceServer) CanonicalizeAlreadyIncludedUrl(context.Context, *v1.QueuedUri) (*v1.QueuedUri, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanonicalizeAlreadyIncludedUrl not implemented")
}
func (UnimplementedUrlCanonicalizerServiceServer) mustEmbedUnimplementedUrlCanonicalizerServiceServer() {
}

// UnsafeUrlCanonicalizerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlCanonicalizerServiceServer will
// result in compilation errors.
type UnsafeUrlCanonicalizerServiceServer interface {
	mustEmbedUnimplementedUrlCanonicalizerServiceServer()
}

func RegisterUrlCanonicalizerServiceServer(s grpc.ServiceRegistrar, srv UrlCanonicalizerServiceServer) {
	s.RegisterService(&_UrlCanonicalizerService_serviceDesc, srv)
}

func _UrlCanonicalizerService_CanonicalizeCrawlUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueuedUri)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlCanonicalizerServiceServer).CanonicalizeCrawlUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.urlcanonicalizer.v1.UrlCanonicalizerService/CanonicalizeCrawlUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlCanonicalizerServiceServer).CanonicalizeCrawlUrl(ctx, req.(*v1.QueuedUri))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlCanonicalizerService_CanonicalizeAlreadyIncludedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueuedUri)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlCanonicalizerServiceServer).CanonicalizeAlreadyIncludedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.urlcanonicalizer.v1.UrlCanonicalizerService/CanonicalizeAlreadyIncludedUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlCanonicalizerServiceServer).CanonicalizeAlreadyIncludedUrl(ctx, req.(*v1.QueuedUri))
	}
	return interceptor(ctx, in, info, handler)
}

var _UrlCanonicalizerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.urlcanonicalizer.v1.UrlCanonicalizerService",
	HandlerType: (*UrlCanonicalizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CanonicalizeCrawlUrl",
			Handler:    _UrlCanonicalizerService_CanonicalizeCrawlUrl_Handler,
		},
		{
			MethodName: "CanonicalizeAlreadyIncludedUrl",
			Handler:    _UrlCanonicalizerService_CanonicalizeAlreadyIncludedUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "urlcanonicalizer/v1/urlcanonicalizer.proto",
}
